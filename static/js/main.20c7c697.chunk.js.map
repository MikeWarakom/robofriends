{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","props","email","name","id","alt","src","CardList","robots","map","user","i","Scroll","style","overflowY","boarder","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","lenght","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAeeA,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKC,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCWXK,EAhBF,SAACC,GACV,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,KAAMC,EAAOH,EAAPG,GAErB,OAGI,sBAAKR,UAAU,sDAAf,UACI,qBAAKS,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,cACrB,gCACA,mCAAMD,EAAN,OACA,4BAAID,WCQDK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACI,cAAC,EAAD,CAEIP,GAAII,EAAOG,GAAGP,GACdD,KAAMK,EAAOG,GAAGR,KAChBD,MAAOM,EAAOG,GAAGT,OAHZS,SCAdC,G,MARA,SAACX,GACZ,OACI,qBAAKY,MAAO,CAAEC,UAAW,SAAUC,QAAS,kBAAmBC,OAAQ,SAAvE,SACKf,EAAMgB,aCiBJC,E,kDAnBX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IACDkB,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,yCAEJG,KAAKtB,MAAMgB,a,GAhBCQ,aC0DZC,E,kDApDX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAjB1C,EAAKZ,MAAQ,CACTX,OAAQ,GACRqB,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBG,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAAChB,OAAQ4B,S,oBAU/B,WAEI,MAAgCb,KAAKJ,MAA7BX,EAAR,EAAQA,OAAQqB,EAAhB,EAAgBA,YACVQ,EAAiB7B,EAAO8B,QAAO,SAAAC,GACrC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASZ,EAAYW,kBAMrD,OAAsB,IAAlBhC,EAAOkC,OACA,yCAGH,sBAAK9C,UAAU,QAAf,UACI,8CACA,cAAC,EAAD,CAAWD,aAAc4B,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUnB,OAAQ6B,e,GA3C5BZ,aCKHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAQ,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.20c7c697.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">    \r\n            <input \r\n                className='pa2 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange}        \r\n            />\r\n        </div>            \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n    const { email, name, id } = props;\r\n\r\n    return (\r\n        \r\n\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n            <h2> {name} </h2>  \r\n            <p>{email}</p>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            { \r\n                robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}                   \r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', boarder: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Ooops </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''        \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({robots: users});\r\n        })\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value })\r\n        \r\n    }\r\n\r\n    render() {\r\n        // this.state mozna uzywac przed robots, np this.state.robots.filter() lub ustawic const\r\n        const { robots, searchField } = this.state\r\n        const filteredRobots = robots.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())    \r\n        })\r\n\r\n        // zamiast if.lenght === 0 mozna zrobic !robots.length i bedzie to samo\r\n        // zamiast if else mozna dac ? jako if na koncu zdania oraz : jako else na koncu\r\n        // zdania za return <h1>Loading</h1>\r\n        if (robots.lenght === 0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='f4 tc'>    \r\n                    <h1>Robo Friends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>    \r\n                    </Scroll>\r\n                </div>    \r\n            );\r\n\r\n        }\r\n    }    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render( <App/>, document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}